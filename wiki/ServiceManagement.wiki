#summary Short process descriptions, notes and checks for Catz management and for version upgrades
#labels Mojolicious,perlbrew,Perl,Linux

<wiki:toc max_depth="2" />

This page is provided as public to show an example how Perl & Mojolicious 
-based application can be managed in everyday life. This also gives me online access to the notes 24/7 around the globe.

= Update data (unchanged structures) =
  
  * run database loader (choose modes "meta post" or "meta post check" if there is only data changes, choose all modes if new photos are to be loaded first)
{{{
perl load.pl meta post check
}}}
{{{
perl load.pl
}}}    
  * the current version is automatically rolled to the new version  
  * fire up the service on dev and check that the service works properly on new data
{{{
perl run.pl daemon
}}}        
  * stop the service on dev
  * detect what is the production environment's path from HTTP headers or from prod server processes
{{{
ps -ef | grep catz
}}}
  * ship the database file to the production db folder (but NOT the key file)
  * after a succesfull shipping set the database file to read only
  * ship the database key file matching the database file
  * the production switches immediately to use the new data           
  * check that the production effectively runs on the new data (visually from the production service's pages or by checking HTTP headers)
  * browse a few pages to make sure the production works properly
  * run incremental backup or full backup (full should be run when a gallery is completed)
{{{
nohup backup_incr.sh &
}}}       
{{{
nohup backup_full.sh &
}}}

= Revert the deployment of the data = 

  * check that both the database file and the key file to revert to exists
  * delete any newer key files
  * the production switches immediately to use the older data
  * run incremental backup
{{{
nohup backup_incr.sh &
}}}       

= Deploy a new static content with a new version of the data =

  * ship the new static content
  * progress using the instructions for update data           
      
= Deploy a new version of the service =

== on development ==

  * make sure that you have made at least one database loading compared to the version in production (data version must have been changed forward) 
  * clean old database versions from /db (leave only the latest db and the latest db key file)
  * clean logs from /log
  * check what is in /temp and clean it if needed     
  * fresh start memcached
  * run tests
    * all test should pass without warnings
    * check that the stats are reasonable (Files=21, Tests=8415, 125 wallclock secs)
    * ocassionally run the page walker script/walk.pl to find dead links        
  * SVN commit the project if not yet done  

== on production ==

  * detect what is the production environment's path from HTTP headers or from prod server processes
{{{
ps -ef | grep catz
}}}
  * delete all stuff from the NON-production environment directory 
{{{ 
...
rm -fR *
}}}
  * deploy the new version of the application by shipping all files
    * on slow connection consider gzipping the database before shipping and then ungzipping
  * set the database file to read only  
  * run tests
    * all test should pass without warnings
    * check that the stats are reasonable (Files=21, Tests=9439 86 wallclock secs)    
  * fire up the service
{{{
hypnotoad run.pl
}}} 
  * test the service via tunneled port that it appears to work properly
  * edit nginx config so that the proxying points to the deployed environment
  * test nginx config 
{{{
nginx -t
}}}
  * reload nginx config
{{{
kill -HUP $( cat /var/run/nginx.pid )
}}}   
  * test via the public interface that the service works properly and that it runs on the correct enviroment (from pages of from HTTP headers)      
  * change the enviroment in the boot time startup script 
{{{
pico /etc/rc.local
}}}
  * run incremental backup
{{{
nohup backup_incr.sh &
}}}       
  * shutdown the NON-production environment
{{{
cat hypnotoad.pid | xargs kill -TERM
}}} 

= Update Mojolicious & Hypnotoad on the fly =

  * do the Mojolicious update on dev first to find out any issues
  * update Mojolicious via CPAN on prod
  * run tests, although this has a limited meaning since if something is broken , the results goes to cache and is served from there thereafter
  * restart Hypnotoad
{{{    
kill -USR2 <pid>
}}}
  * log/production.log should indicate an new start 
{{{
[Sun Jul 17 18:39:38 2011] [info] Server listening (...)
}}}
  * hypnotoad.pid should show a fresh pid
  * check that the service appears to work
  * run the incremental backup
{{{
nohup backup_incr.sh &
}}}       

= Update Perl =

  * install the latest stable Perl (this will run for a while)
{{{  
perlbrew install perl-x.yy.z
}}}
  * use the new perl only in the current session
{{{
perlbrew use perl-x.yy.z
}}}
  * install the latest CPAN
  * reload cpan
  * install the required Perl modules
  * run tests, all should pass without warnings, check that the stats are reasonable     
  * switch to the new perl
{{{
perlbrew switch perl-x.yy.z
}}}
  * restart hypnotoad
{{{
kill -USR2 <pid>
}}}
  * run the incremental backup
{{{
nohup backup_incr.sh &
}}}