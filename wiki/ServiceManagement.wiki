#summary Short process descriptions, notes and checklists for catza.net service management and service deployment
#labels Mojolicious,perlbrew,Perl,Linux

This page is provided as public to show an example how Perl/Mojolicious-based application can be managed and to give me online access to these notes 24/7 around the globe. The notes are not complete nor polished.

= Update data (unchanged structures) =
  
  * run database loader on dev on meta and post (if static content has changed then include folders by not specifying any parameters)
{{{
perl load.pl meta post
}}}    
  * if the load is successfull then roll to the latest version
{{{
perl roll.pl
}}}
  * fire up the service on dev and check that all looks good
{{{
perl run.pl daemon
}}}        
  * detect what is the production environment's path
{{{
ps -ef | grep catz
}}}
  * ship the database file to the production db folder (but NOT the key file)
  * after a succesfull shipping set the database file to read only
  * ship the database key file matching the database file (and the production switches immediately to use the new data)           
  * check that the production effectively runs on the new data (from HTML meta enviroment tag)
  * browse a few pages to make sure the production works properly
  * run incremental backup or a full backup (full should be run when a gallery is completed)
{{{
nohup backup_incr.sh &
}}}       
{{{
nohup backup_full.sh &
}}}

= Revert the deployment of the data = 

  * check that both the database file and the key file to revert to exists
  * delete any newer key files (and the production switches immediately)
  * run incremental backup
{{{
nohup backup_incr.sh &
}}}       

= Deploy a new static content with a new version of the data =

  * ship the static content
  * progress using the instructions for update data           
      
= Deploy a new version of the service =

== on dev ==

  * make sure that you have made at least one database loading compared to the version in production (data version must have been changed forward), if not then make a pseudo loading (loading just meta is simplest if no changes)
  * roll to the latest database version 
  * clean old database versions from /db (leave only the latest and the latest key file)
  * clean logs from /log
  * check what is in /temp and clean it if needed     
  * fresh start memcached
  * run tests
    * all test should pass without warnings
    * check that the stats are reasonable (Files=18, Tests=7244 - 7274, 50 - 100 wallclock secs)    
  * SVN commit the project if not yet committed  

== on prod ==

  * detect what is the production environment's path
{{{
ps -ef | grep catz
}}}
  * delete all stuff from the non-production environment directory 
{{{ 
...
rm -fR *
}}}
  * deploy the new version of the application by shipping all files
    * on slow connection consider gzipping the database before shipping and then ungzipping
  * set the database file to read only  
  * run tests
    * all should pass without warnings
    * check that the stats are reasonable (Files=18, Tests=7244 - 7274, 50 - 100 wallclock secs)    
  * fire up the service
{{{
hypnotoad run.pl
}}} 
  * test the service via ssh tunneled port that it appears to work as expected
  * edit nginx config (two places) to so that the proxying points to the deployed service
  * test nginx config 
{{{
nginx -t
}}}
  * reload nginx config
{{{
kill -HUP $( cat /var/run/nginx.pid )
}}}   
  * test via the public interface that the service works normally and that it runs on the correct enviroment (from HTML meta)       
  * change the enviroment in the boot time startup script 
{{{
pico /etc/rc.local
}}}
  * run the incremental backup
{{{
nohup backup_incr.sh &
}}}       
  * shutdown the non-production
{{{
cat hypnotoad.pid | xargs kill -TERM
}}} 

= Update Mojolicious & Hypnotoad on the fly =

  * do the Mojolicious update on dev first to find out any issues
  * update Mojolicious via CPAN
  * run tests, although this has a limited meaning since if something is broken , the results goes to cache and is served from there thereafter
  * restart Hypnotoad
{{{    
kill -USR2 <pid>
}}}
  * log/production.log should indicate an new start 
{{{
[Sun Jul 17 18:39:38 2011] [info] Server listening (...)
}}}
  * hypnotoad.pid should show a fresh pid
  * check that the service appears to work
  * run the incremental backup
{{{
nohup backup_incr.sh &
}}}       

= Update Perl =

  * install the latest stable Perl (this will run for a while)
{{{  
perlbrew install perl-x.yy.z
}}}
  * use the new perl only in the current session
{{{
perlbrew use perl-x.yy.z
}}}
  * install the latest CPAN
  * reload cpan
  * install the required Perl modules
  * run tests, all should pass without warnings, check that the stats are reasonable     
  * switch to the new perl
{{{
perlbrew switch perl-x.yy.z
}}}
  * restart hypnotoad
{{{
kill -USR2 <pid>
}}}
  * run the incremental backup
{{{
nohup backup_incr.sh &
}}}             