#summary Short process descriptions, notes and checklists for catza.net service management and service deployment

Please note that this page is provided as public for both due to common interest and to give me an online access to the service management notes 24/7 around the globe. The langauge used here is not polished and the notes are not complete. The tasks and commands run as root and other users are all presented as a list without information what user to use.

= Deploy a new version of the data =

  * database structures should not have changed, only the data in them
  * detect what is the current production environment (from HTML meta)
  * ship the database file to the production db folder (but not the key file)    
  * set database file to read only  
  * run the database verify tool (get the auth key from core conf), the verification should return OK
  * ship the database key file matching the new database and the production switches immediately to use the new database
  * check that the new data version is really in production (from HTML meta)
  * browse a few pages to make sure the production works properly
  * run the incremental backup or a full backup (full is run when a gallery is completed)
{{{
backup_incr.sh
}}}       
{{{
backup_full.sh
}}}

= Revert the deployment of the data = 

  * check that the database key file to revert exists and delete any newer files and the production switches immediately to the older data version
  * run the incremental backup
{{{
backup_incr.sh
}}}       

= Deploy a new static content with a new version of the data =

  * ship the static content
  * progres using the instructions for deploying a new version of the data            
      
= Deploy a new version of the service =

== on dev ==

  * make sure that you have made at least one database loading compared to the version in production (data version must have been changed forward), if not then make a pseudo loading (loading just meta is simplest if no changes)
  * roll to the latest database version 
  * clean old database versions from /db (leave only the latest and the latest key file)
  * clean logs from /log
  * check what is in /temp and clean it if needed    
  * check that run.pl has production mode for win 
  * fresh start memcached
  * run tests, all test should pass without warnings, check that the number of test and the time taken seems reasonable: Files=13, Tests=20894, 279 wallclock secs
  * SVN commit the project if not yet committed  

== on prod ==

  * detect what is the current production environment (from HTML meta)
  * cd to the non-production enviroment  
  * verify that there is no hypnotoad.pid file in scripts directory (that would indicate that this service is running and might be in production)       
  * delete all stuff from the non-production application directory 
{{{ 
rm -fR *
}}}
  * deploy the new version of the application by shipping all files (on slow connection consider gzipping the database before shipping and then ugzipping)
  * set database file to read only  
  * run tests on prod, all should pass without warnings, check that the stats are resonable: Files=13, Tests=20894, 195 wallclock secs     
  * fire up the service
{{{
hypnotoad run.pl
}}} 
  * test the service via ssh tunneled port that it appears to work as expected
  * edit nginx config to so that the proxying points to the deployed service
  * test the nginx config 
{{{
nginx -t
}}}
  * reload nginx config
{{{
kill -HUP $( cat /var/run/nginx.pid )
}}}   
  * test via the public interface that the service works normally and it runs on the correct enviroment (from HTML meta)
  * shutdown the non-production
{{{
cat hypnotoad.pid | xargs kill -TERM
}}}        
  * change the enviroment in the boot time startup script 
{{{
pico /etc/rc.local
}}}
  * run the incremental backup
{{{
backup_incr.sh
}}}       

= Update Hypnotoad on the fly =

  * update Mojolicious via CPAN
  * restart Hypnotoad
{{{    
kill -USR2 <pid>
}}}
  * log/production.log should indicate an new start 
{{{
[Sun Jul 17 18:39:38 2011] [info] Server listening (...)
}}}
  * hypnotoad.pid should show a fresh pid
  * run the incremental backup
{{{
backup_incr.sh
}}}       

= Update Perl =

  * install the latest stable Perl, this will run for a while
{{{  
perlbrew install perl-x.yy.z
}}}
  * use the new perl only in the current session
{{{
perlbrew use perl-x.yy.z
}}}
  * install the latest CPAN
  * reload cpan
  * install the required Perl modules
  * run tests, all should pass without warnings, check that the stats are resonable: Files=13, Tests=20894, 195 wallclock secs         
  * switch to the new perl
{{{
perlbrew switch perl-x.yy.z
}}}
  * restart hypnotoad
{{{
kill -USR2 <pid>
}}}
  * run the incremental backup
{{{
backup_incr.sh
}}}       
        